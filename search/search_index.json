{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"assign_id_to_group_consecutive_seq/","title":"Assign id to slices of consecutive sequences number","text":"<p>Given :</p> group_id seq SEC20_N_0 1 SEC20_N_0 2 SEC20_N_0 6 SEC20_N_0 8 SEC20_N_0 9 SEC20_N_0 10 <p>Assign a id to the slice of consecutive sequence numbers</p> <p>Answer :</p> <pre><code>WITH base AS (\nSELECT * FROM (\nVALUES ('SEC20_N_0', 1)\n,('SEC20_N_0', 2)\n,('SEC20_N_0', 6)\n,('SEC20_N_0', 8)\n,('SEC20_N_0', 9)\n,('SEC20_N_0', 10)\n) group_sequence(group_id, seq)\n), base_with_previous_sequence AS (\nSELECT *\n,LAG(seq,1,0) OVER (PARTITION BY group_id ORDER BY seq) as previous_seq\n-- If the current sequence - 1 is equals to previous value , then it means no gap \n-- Else it means that there is a gap so we return 1\n,CASE WHEN seq - 1 = LAG(seq,1,1) OVER (PARTITION BY group_id ORDER BY seq) THEN 0  ELSE 1  END AS diff\nFROM base\n), base_with_lot_id AS (\nSELECT * -- Sum the diff , after each gap , the lot_id increases by 1\n, SUM(diff) OVER (PARTITION BY group_id ORDER BY seq) AS lot_id\nFROM base_with_previous_sequence\n)\nSELECT * FROM base_with_lot_id;\n</code></pre> group_id seq previous_seq diff lot_id SEC20_N_0 1 0 1 1 SEC20_N_0 2 1 0 1 SEC20_N_0 6 2 1 2 SEC20_N_0 8 6 1 3 SEC20_N_0 9 8 0 3 SEC20_N_0 10 9 0 3"}]}